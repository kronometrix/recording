#!/opt/kronometrix/perl/bin/perl

#  Copyright (c) 2018 Stefan Parvu (www.kronometrix.org).
#  Initial Author: Stefan Parvu
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use POSIX qw(pause);
use Tie::IxHash;
#use Data::Dumper;

###  Process command line args
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hlvV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# verbose flag
my $verbose = defined $main::opt_v ? $main::opt_v : 0;

# logging flag
my $logging = defined $main::opt_l ? $main::opt_l : 0;

# process [interval [count]],
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

###  Variables
my $loop      = 0;                  # current loop number
$main::opt_h  = 0;                  # help option
$main::opt_l  = 0;                  # logging option
$main::opt_V  = 0;                  # revision option
my $cfile     = 'rs485rec.json';    # configuration file
my $kfile     = 'kronometrix.json'; # configuration file
my $tp        = 0;                  # time precision
my $port;                           # serial port config
my $baudrate;                       # serial baudrate config
my $timeout;                        # serial timeout config
my $parity;                         # serial line parity config
my $stopbits;                       # serial stopbits config
my $databits;                       # serial databits config
my ($cdata, $kdata);                # configuration data
my ( $baselog, $curlog, $rlog);

local $| = 1;

### MAIN BODY #

# Set a timer
local $SIG{ALRM} = sub { };
setitimer( ITIMER_REAL, .2, .2 );

### 0.2sec sleep using a timer
pause;

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}

# we need all info
# read rs485rec configuration
$cdata = open_config($cfile);

my $log;
my $MODBUS_RTU   = 0;
my $MODBUS_ASCII = 0;

# workloads
tie my %devices, "Tie::IxHash";
%devices = get_devices($cdata);

# logging option
if ($logging) {

    # kronometrix.json config file
    $kdata = open_config($kfile);

    ## logs
    ( $baselog, $curlog ) = get_log($kdata);
    $rlog = $baselog . "/rs485rec.log";
    $log = open_file($rlog);

    # save STDERR to log file
    *STDERR = $log;

    write_log ("info: started");
}

# get it as verbose
if($verbose) {
    if ($logging) {
        print $log "Total devices: " . keys(%devices) . ".\n";
        for my $key (keys %devices) {
            my $value = $devices{$key};
            print $log "$key => $value\n";
        }
    } else {
        print "Total devices: " . keys(%devices) . ".\n";
        for my $key (keys %devices) {
            my $value = $devices{$key};
            print "$key => $value\n";
        }
    }
}


# main loop
while (1) {

    my $client;

    # get it as verbose
    if($verbose) {
        if ($logging) {
            print $log "Client type: RTU: $MODBUS_RTU, ASCII: $MODBUS_ASCII\n";
        } else {
            print "Client type: RTU: $MODBUS_RTU, ASCII: $MODBUS_ASCII\n";
        }
    }

    eval {
        
        if ($MODBUS_RTU) {

            use Device::Modbus::RTU::Client;

            if (defined $databits) {
                $client = 
                  Device::Modbus::RTU::Client->new( port     => $port,
                                                    baudrate => $baudrate,
                                                    timeout  => $timeout,
                                                    parity   => $parity,
                                                    databits => $databits,
                                                    stopbits => $stopbits
                                                  );
            } else {
                $client = 
                  Device::Modbus::RTU::Client->new( port     => $port,
                                                    baudrate => $baudrate,
                                                    timeout  => $timeout,
                                                    parity   => $parity,
                                                    stopbits => $stopbits
                                                  );
            }
 
        } elsif ($MODBUS_ASCII) {

            use Device::Modbus::ASCII::Client;

            if (defined $databits) {
                $client =
                  Device::Modbus::ASCII::Client->new( port     => $port,
                                                      baudrate => $baudrate,
                                                      timeout  => $timeout,
                                                      parity   => $parity,
                                                      databits => $databits,
                                                      stopbits => $stopbits
                                                    );
            } else {
                $client =
                  Device::Modbus::ASCII::Client->new( port     => $port,
                                                      baudrate => $baudrate,
                                                      timeout  => $timeout,
                                                      parity   => $parity,
                                                      stopbits => $stopbits
                                                    );
            }
        }
    };

    if ($@) {
        if ($logging) {
            write_log ("error: cannot initialize MODBUS Client port $port, check rs485rec.json");
        } else {
            print "error: cannot initialize MODBUS Client port $port, check rs485rec.json\n";
        }
    } else {

        for my $key (keys %devices) {

            my $value = $devices{$key};
            my ($rawfile, $dev_name, $modbus_id, $modbus_func, $desc) = split( /:/, $key );
            my @values = split( /:/, $value );
            eval {
                exec_modbus($client, $rawfile, $dev_name, $modbus_id, $modbus_func, @values);
            };

            if ($@) {
                if ($logging) {
                    write_log ("error: cannot access device $dev_name, check $cfile");
                } else {
                    print "error: cannot access device $dev_name, check $cfile\n";
                }
            }
            sleep 2;
        }
    }

    if ($client) {
        # closing all
        $client->disconnect;
    }

    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;
}


### Subroutines
## configuration file

# open JSON configuration file
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}


# get log defintion
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# get  defintion
#
sub get_devices {

    my ($data) = @_;
    tie my %devs, "Tie::IxHash";

    my @proto = ('modbus-ascii', 'modbus-rtu');

    for my $protocol (@proto) {

        # skip protocols if not defined
        next if (! defined $data->{$protocol});

        $MODBUS_RTU = 1 if ($protocol eq 'modbus-rtu');
        $MODBUS_ASCII = 1 if ($protocol eq 'modbus-ascii');

        my @temp = @{ $data->{$protocol} };

        for my $f (@temp) {
            my ($sid, $tid, $dsid);

            $port      = $f->{'port'};
            $baudrate  = $f->{'baudrate'};
            $timeout   = $f->{'timeout'};
            $parity    = $f->{'parity'};
            if (defined $f->{'databits'}) {
                $databits = $f->{'databits'};
            }
            $stopbits  = $f->{'stopbits'};

            my @lmoids = ('iaq', 'aq');

            for my $lmoid (@lmoids) {
                next if (! defined $f->{$lmoid});
                my @reqs = @{ $f->{$lmoid} };

                for my $dev (@reqs) {
                    my $unit    = $dev -> {'unit'};
                    my $vendor  = $dev -> {'vendor'};
                    my $model   = $dev -> {'model'};
                    my $mf      = $dev -> {'function'};

                    my @registers = @{ $dev->{'data'} };

                    my $k=0;
                    my $params;
                    for my $dt (@registers) {
                        my ($dname, $dtype);
                        my $dreg; my $dlen; my $dfct;

                        if ( $dt -> {'type'} eq 'uint16' or
                             $dt -> {'type'} eq 'int16' or
                             $dt -> {'type'} eq 'floatinv'  ) {

                            $dname = $dt -> {'name'};
                            $dtype = $dt -> {'type'};

                            $dreg = $dt -> {'register'};
                            $dlen = $dt -> {'length'};
                            $dfct = $dt -> {'factor'};
             
                            $dname .=  '_' . $dtype . '_' . $dreg . '_' . $dlen . '_' . $dfct;

                        } elsif ( $dt -> {'type'} eq 'virtual' ) {

                            $dname = $dt -> {'name'};
                            $dtype = $dt -> {'type'};
                            my $did = $dt -> {'id'};
                            my @args = @{ $dt->{'args'} };
                            $dname .=  '_' . $dtype . '_' . $did . '_'  . join("_", @args);

                        } elsif ( $dt -> {'type'} eq 'NA' ) {

                            $dname = $dt -> {'name'};
                            $dtype = $dt -> {'type'};
                            $dname .=  '_' . $dtype;
 
                        } else { next; }
    
                        if ($k > 0) {
                            $params .= ':' . $dname;
                        } else {
                            $params .= $dname;
                        }
    
                        $k++;
                    }
                    my $rfile = $lmoid . '_' . $model . 'rec';
                    my $devname = $model . '_' . $unit;
                    my $keyapp = $rfile . ':' . $devname . ':'  . $unit . ':' . $mf . ':' . $vendor;
                    my $hvalue = $params;
                    $devs{$keyapp} = $hvalue;
                }

            } # iaq, aq
        }
    }

    return %devs;
}


# MODBUS RTU fetch register value, returns a single value
#
sub getval {

    my ( $client, $modbus_id, $modbus_f, $type, $address, $quantity, $factor ) = @_;
    my $rvalue;

    # MODBUS-RTU FUNCTION 4
    if ( $type ne 'NA' ) {

        if ( $modbus_f == 3 ) {

            my $req = $client->read_holding_registers( unit     => $modbus_id,
                                                       address  => $address,
                                                       quantity => $quantity);
            $client->send_request($req);
            my $resp = $client->receive_response;

            if ( $type eq 'uint16' ) {

                $rvalue = sprintf ("%.2f", $resp->{message}->{values}->[0] * $factor);

            } elsif ( $type eq 'int16' ) {

                $rvalue = sprintf ("%.2f", uint16_int16($resp->{message}->{values}->[0]) * $factor);

            } elsif ( $type eq 'floatinv' ) {

                $rvalue  = sprintf ("%.2f", unpack 'f', pack 'v*',
                                            reverse @{ $resp->{message}->{values} } );
            }
        }

        elsif ( $modbus_f == 4 ) {
        
            my $req = $client->read_input_registers( unit     => $modbus_id,
                                                     address  => $address,
                                                     quantity => $quantity);
            $client->send_request($req);
            my $resp = $client->receive_response;

            if ( $type eq 'uint16' ) {

                $rvalue = sprintf ("%.2f", $resp->{message}->{values}->[0] * $factor);

            } elsif ( $type eq 'int16' ) {

                $rvalue = sprintf ("%.2f", uint16_int16($resp->{message}->{values}->[0]) * $factor);

            } elsif ( $type eq 'floatinv' ) {

                $rvalue  = sprintf ("%.2f", unpack 'f', pack 'v*', 
                                            reverse @{ $resp->{message}->{values} } );
            }
        }

    } else {

        $rvalue = 'NA' ;
    }

    # return register single value
    return $rvalue;

}


# MODBUS Client communication
#
sub exec_modbus {

    my ( $rtu, $rawfile, $name, $modbus_id, $modbus_f, @vals ) = @_;

    tie my %metrix, "Tie::IxHash";

    my $val;
    my $fval;

    if ($logging) {
        write_log ("krd: $rawfile, dev: $name, unit: $modbus_id, function: $modbus_f, @vals")
            if ($verbose);
    } else {
        print "krd: $rawfile, dev: $name, unit: $modbus_id, function: $modbus_f, @vals"
            if ($verbose);
    }
 
    my $treq = time;
    #$fval .= $treq . ':' . $name;

    for my $metric (@vals) {
        my @v = split("_",  $metric);

        # metric name
        # $v[0];
      
        if ( $v[1] eq 'virtual' ) {

            # virtual data type
            my $vf = $v[2];

            # check metrix buffer
            my @fname_args = @v[3..$#v];
            
            my ($temp, $humidity);
                  
            for my $fa (@fname_args) {
                                                      
                if ( $fa eq 'ta' ) {
                                                      
                    if (exists $metrix{$fa}) {
                        my $arg = $metrix{$fa};
                        $temp = $arg;
                     }
                
                 } elsif ( $fa eq 'rh' ) {
        
                     if (exists $metrix{$fa}) {
                         my $arg = $metrix{$fa};
                         $humidity = $arg;
                     }
                 }
            }

            # virtual function list: dewpoint, dewpoint_cimo, lcl
            if ($vf eq 'dewpoint' ) {

                $val = sprintf ("%.2f", dewpoint($temp, $humidity) );

            } elsif ($vf eq 'dewpoint_cimo' ) {

                $val = sprintf ("%.2f", dewpoint_cimo($temp, $humidity) );
 
            } elsif ($vf eq 'lcl' ) {

                $val = sprintf ("%.2f", lcl($temp, $humidity) );
 
            } else { next; }

        } else {

            # numeric data types
            $val = getval ($rtu, $modbus_id, $modbus_f, $v[1], $v[2], $v[3], $v[4]);
        }

        # all metrix buffer        
        $metrix{$v[0]} = $val;

        if ($logging) {
            write_log ("Metric: $v[0] -> $val") if ($verbose);
        } else {
            print "Metric: $v[0] -> $val\n" if ($verbose);
        }
       
        $fval .=  ':' . $val;
    }

    if ($logging) {

        # set krd raw file
        $rawfile = $curlog . "/" . $rawfile . ".krd";

        write_log ("rawfile=$rawfile") if ($verbose);

        my $rawkrd = open_file($rawfile);
        printf $rawkrd "%.${tp}f:%s%s\n", time, $name, $fval;
        close ($rawkrd);

    } else {

        printf "%.${tp}f:%s%s\n", time, $name, $fval;

    }
}


# Changes from unsigned int to signed int
# used to convert different MODBUS values to signed int
#
sub uint16_int16 {
  my $v = shift;
  return ($v & 0x8000) ? -((~$v & 0xffff) + 1) : $v;
}


# Returns dewpoint (Td) based on temperature & humidity
# http://en.wikipedia.org/wiki/Dew_Point
#
sub dewpoint {
    my $temp = shift;
    my $humidity = shift;
    $humidity /= 100.0;
    my $gamma = (17.271 * $temp) / (237.7 + $temp) + log($humidity) ;
    return (237.7 * $gamma) / (17.271 - $gamma);
}


# Returns dewpoint (Td) according with CIMO Guide-7th_Edition-2008
# based on temperature and humidity 
#
sub dewpoint_cimo {
    my $temp = shift;
    my $humidity = shift;
    my $c1 = 243.12;
    my $c2 = 17.62;
    my $g1 = $humidity * exp(($c2 * $temp) / ($c1 + $temp));
    my $gamma = log($g1 / 100);
    return ($c1 * $gamma) / ($c2 - $gamma);
}


# Returns lifted condensation level (lcl) based on temperature & humidity
# http://en.wikipedia.org/wiki/Lifted_condensation_level
# 
sub lcl {
    my $temp = shift;
    my $humidity = shift;
    my $lcl = (20 + ($temp / 5)) *  (100 - $humidity);
    return $lcl;
}


## auxiliares


# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
	  die "error: open_file - cannot open $file $!";
	seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
	  die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}


# usage - print usage and exit
#
sub usage {
    print STDERR <<END;
USAGE: rs485rec [-hlvV] | [interval [count]]
 e.g. rs485rec 60     print continuously, every 60 seconds, to STDOUT
      rs485rec 60 5   print 5 times, every 60 seconds, to STDOUT
      rs485rec -l 60  print continuously, every 60 seconds to raw datafile
      rs485rec -V     print recorder revision 

OPTIONS:
  -h        : help information
  -l        : log raw data to krd file, no STDOUT
  -v        : verbose information
  -V        : release version
  interval  : maximum number of seconds between samples

 DATA MESSAGES

 *** OUTDOOR AIR QUALITY ***

   Vaisala AQT420 AQ (aq_aqt420)
    #01 Timestamp : Seconds since Epoch, time
    #02 Devid     : The device id, string
    #03 NO2       : Nitrite ion level, in ppm, number
    #04 SO2       : Sulphur dioxide level, in ppm, number
    #05 CO        : Carbon monoxide level, in ppm, number
    #06 EMPTY     : Future usage
    #07 H2S       : Hydrogen Sulfide level, in ppm, number
    #08 O3        : Ozone level, in ppm, number
    #09 NO        : Nitrogen oxide level, in ppm, number
    #10 VOC       : Volatile organic compound level, in ppm, number
    #11 PM25      : PM2.5 level, in ug/m3, number
    #12 PM10      : PM10 level, in ug/m3, number
    #13 Ta        : Air termperature, in C, number
    #14 Td        : Dewpoint, in C, number
    #15 Rh        : Relative humidity, in %, number
    #16 Lcl       : Lifted condensation level, in meters, number
    #17 P         : Air pressure, in mbar, number

 *** INDOOR AIR QUALITY ***

   Tongdy MSD-1618 IAQ (iaq_msd1618)
    #01 Timestamp : Seconds since Epoch, time
    #02 Devid     : The device id, string
    #03 Ta        : Air termperature, in C, number
    #04 Rh        : Relative humidity, in %, number
    #05 Td        : Dew point, in C, number
    #06 CO2       : CO2 level, in ppm, number
    #07 TVOC      : Total volatile organic compound, in mg/m3, number
    #08 PM25      : Particulate matter 2.5 micrometers, in ug/m3, number
    #09 PM10      : Particulate matter 10 micrometers, in ug/m3, number

   Tongdy G01 IAQ (iaq_g01)
    #01 Timestamp : Seconds since Epoch, time
    #02 Devid     : The device id, string
    #03 Ta        : Air termperature, in C, number
    #04 Rh        : Relative humidity, in %, number
    #05 Td        : Dew point, in C, number
    #06 CO2       : CO2 level, in ppm, number
    #07 VOC       : Volatile organic compound, in ppm, number

   Vaisala GMW90 IAQ (iaq_gmw90)
    #01 Timestamp : Seconds since Epoch, time
    #02 Devid     : The device id, string
    #03 Ta        : Air termperature, in C, number
    #04 Rh        : Relative humidity, in %, number
    #05 Td        : Dew point, in C, number
    #06 CO2       : CO2 level, in ppm, number

 NOTES
 rs485rec is a multi-message data recorder, capable to handle multiple 
 devices on RS485 wire, using different protocols, like: MODBUS RTU, 
 MODBUS TCP or MODBUS ASCII.

 The recorder uses rs485rec.json configuration file, where all data messages
 are defined. 

 UNITS
  ppm    - parts per million
  mg/m3  - milligram per cubic meter
  ug/m3 - microgram per cubic meter
END
    exit 0;
}

# revision - print revision and exit
sub revision {
    print STDERR <<END;
rs485rec: 1.2.5, 2018-03-13 1405
END
    exit 0;
}
